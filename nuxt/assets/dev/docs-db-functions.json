[
  {
    "name": "getUserInfo",
    "params": [
      {
        "name": "uid",
        "type": "string",
        "desc": "The UID of the user"
      }
    ],
    "return": {
      "type": "{; profileAccess: int,; first: string,; last: string,; birth: date,; nationality: string;}",
      "desc": "The user's protected information"    },
    "desc": "This function returns protected information about the user.;The result will only be populated if the user has given you access to the information.",
    "errors":[
      "user not signed in","This user is not public", "You are not friends with this user", "This user is private"
    ]
  },
  {
    "name": "searchUsers",
    "params": [
      {
        "name": "username",
        "type": "string",
        "desc": "The search string"
      },
      {
        "name": "per_page",
        "type": "int?",
        "desc": "Number of results to return per page maximum. (max 20, default 5)"
      },
      {
        "name": "prev_username",
        "type": "string?",
        "desc": "The last search result returned in the previous call for pageination"
      },
      {
        "name": "room",
        "type": "string?",
        "desc": "The room UID to search in or null for all rooms"
      }
    ],
    "return": {
      "type": "[{;id: string,; disp: string,;img: string (obsolete); }]",
      "desc": "An array of users matching the search string.;Populated with the minimal information set."
    },
    "desc": "This function searches for users matching the search string.",
    "errors":[
      "user not signed in", "No username provided", "Error searching users"
    ]
  },
  {
    "name": "sendFriendRequest",
    "params": [
      {
        "name": "receiver",
        "type": "string",
        "desc": "The UID of the user we want to send a friend request to"
      }
    ],
    "return": {
      "type": "void"
    },
    "desc": "This function sends a friend request to the user with the given UID.",
    "errors":[
      "User not authenticated", "You can't send a friend request to yourself","Already friends with this user", "Error<internal>"
    ]
  },
  {
    "name": "acceptFriendRequest",
    "params": [
      {
        "name": "uid",
        "type": "string",
        "desc": "The UID of the user we want to accept a friend request from"
      }
    ],
    "return": {
      "type": "void"
    },
    "desc": "This function accepts a friend request from the user with the given UID.",
    "errors":[
      "User not authenticated", "You can't accept your own friend request", "Already friends with this user", "Error<internal>"
    ]
  },
  {
    "name": "denyFriendRequest",
    "params": [
      {
        "name": "uid",
        "type": "string",
        "desc": "The UID of the user we want to deny a friend request from"
      }
    ],
    "return": {
      "type": "void"
    },
    "desc": "This function denies a friend request from the user with the given UID.",
    "errors":[
      "User not authenticated", "User can't deny their own friendrequest", "Error<internal>"
    ]
  },
  {
    "name": "removeFriend",
    "params": [
      {
        "name": "uid",
        "type": "string",
        "desc": "The UID of the user we want to remove as a friend"
      }
    ],
    "return": {
      "type": "void"
    },
    "desc": "This function removes a friend from our friend list.",
    "errors":[
      "User not authenticated", "User can't remove themselves as friend", "Error<internal>"
    ]
  },
  


















  {
    "name": "signOutFromAllDevices",
    "params": [
      {"name":"none", "type":"", "desc":""}
    ],
    "return": {
      "type": "void",
      "desc": ""
    },
    "desc": "Removes all sessions associated with user, forcing all devices to sign in again.",
    "errors":[
      "User not authenticated", "Error<internal>"
    ]
  },
  {
    "name": "signIn",
    "params": [
      {
        "name": "username",
        "type": "string",
        "desc": "The username or email of the user, you should lowercase and trim first."
      },
      {
        "name": "password",
        "type": "string",
        "desc": "The password"
      }
    ],
    "return": {
      "type": "void",
      "desc": ""
    },
    "desc": "This function checks if the credentials are correct and will otherwise check; if they are correct on the old database and then migrate the account to; the new database and return.",
    "errors":[
      "Invalid username/password", "Error<internal>", "User not found <internal error, migration failed>"
    ]
    
  },
  {
    "name": "fetchIfUpdated",
    "params": [
      {
        "name": "className",
        "type": "string",
        "desc": "The className of the object"
      },
      {
        "name": "uid",
        "type": "string",
        "desc": "The UID of the object"
      },
      {
        "name": "updatedAt",
        "type": "date",
        "desc": "The client's latest known updatedAt date" 
      }
    ],
    "return": {
      "type": "DbObject | null",
      "desc": "The DbObject of type <className> if updated; otherwise null"
    },
    "desc": "This functions fetches an object, but only if needed.; Useful for caching and for minimizing data usage.",
    "errors":[
      "User not authenticated.", "className not provided.", "uid not provided."
    ]
  },
  {
    "name": "assignRole",
    "params": [
      {
        "name": "uid",
        "type": "string",
        "desc": "The UID of the user"
      },
      {
        "name":"role", 
        "type":"string", 
        "desc":"The role to assign"
      }
    ],
    "return": {
      "type": "void",
      "desc": ""
    },
    "desc": "Add Role <role> to user with UID <uid>.",
    "roles": ["admin"],
    "errors":[
      "User not authenticated.", "uid not provided.", "role not provided.", "Role not found.", "Error<internal>"
    ]
  },
  {
    "name": "stripRole",
    "params": [
      {
        "name": "uid",
        "type": "string",
        "desc": "The UID of the user"
      },
      {
        "name":"role", 
        "type":"string", 
        "desc":"The role to remove/strip"
      }
    ],
    "return": {
      "type": "void",
      "desc": ""
    },
    "desc": "Remove Role <role> from user with UID <uid>.",
    "roles": ["admin"],
    "errors":[
      "User not authenticated.", "uid not provided.", "role not provided.", "Role not found.", "Error<internal>"
    ]
  },
  {
    "name": "assignRoomMod",
    "params": [
      {
        "name": "uid",
        "type": "string",
        "desc": "The UID of the user"
      },
      {
        "name":"room", 
        "type":"string", 
        "desc":"The UID of the room"
      }
    ],
    "return": {
      "type": "void",
      "desc": ""
    },
    "desc": "Add the role RoomMod to user with UID <uid> in room with UID <room>.",
    "roles": ["admin"],
    "errors":[
      "User not authenticated.", "uid not provided.", "room not provided.", "Role not found.", "Error<internal>"
    ]

  },
  {
    "name": "redeemVoucher",
    "params": [
      {
        "name": "code",
        "type": "string",
        "desc": "Unique code/password to unlock/redeem the voucher"
      }
    ],
    "return": {
      "type": "{;type: int, (1 - room, 2 - course); desc: string, (welcome message or something else); data: string, (UID of unlocked resource, room or course); url: string (payment url if applicable);}",
      "desc": "This is the return value"
    },
    "desc": "Returns an object with information about the unlocked voucher.",
    "errors":[
      "Must be signed in to redeem a voucher","No voucherCode provided", "This code is not valid.","This code has expired.", "This code is currently held be someone else.", "You have already used this code.", "This voucher is for a room that you are already a member of.", "This voucher is for a course that you are already a member of.", "The course does not exist.", "<internal> Could not create subscription", "<internal> user not found", "<internal> voucher not found", "Internal error: Room not found when redeeming voucher.","Internal error: Course not found when redeeming voucher."
    ]
  },
  {
    "name": "removeAllTestObjects",
    "params": [ ],
    "return": {
      "type": "void",
      "desc": ""
    },
    "roles":["admin"],
    "desc": "Removes all objects where object.test is true.;ps. when testing you should define {testing:true} as an argument to the parse connection.; (may be obsolete in web)",
    "errors":["Not admin."]
  },
  {
    "name": "testCheckoutConfirmed",
    "params": [
      {
        "name": "user",
        "type": "string",
        "desc": "The UID of the user"
      },
      {
        "name": "voucher",
        "type":"string",
        "desc":"The UID of the voucher"
      }
    ],
    "return": {
      "type": "void",
      "desc": ""
    },
    "desc": "Uses a voucher without requiring payment. In order to test that user receives the right roles.",
    "roles":["admin"],
    "errors":["Not admin.", "Not logged in.", "Param user missing.", "Param voucher missing.", "... almost all the same as in redeemVoucher function ..."]
  },
  {
    "name": "testCheckoutExpired",
    "params": [
      {
        "name": "user",
        "type": "string",
        "desc": "The UID of the user"
      },
      {
        "name": "voucher",
        "type":"string",
        "desc":"The UID of the voucher"
      }
    ],
    "return": {
      "type": "void",
      "desc": ""
    },
    "desc": "Lets a pending use of a voucher expire.",
    "roles":["admin"],
    "errors":["Not admin.", "Not logged in.", "Param user missing.", "Param voucher missing.", "Voucher not und"]
  },
  {
    "name": "test_assignSubscriptionToCustomer",
    "params": [
      {
        "name": "course",
        "type": "string",
        "desc": "The UID of the course"
      },{
        "name": "user",
        "type": "string",
        "desc": "The UID of the user"
      }
    ],
    "return": {
      "type": "void",
      "desc": ""
    },
    "desc": "'Pays' for an subscription via stripe in order to check; that stripe triggers subscription creation on bridgestars server.",
    "roles":["admin"],
    "errors":["Not logged in.", "Not admin.", "Param user missing.", "Param course missing."]
  },
  {
    "name": "test_cancelSubscription",
    "params": [
      {
        "name": "user",
        "type": "string",
        "desc": "The UID of the user"
      }
    ],
    "return": {
      "type": "void",
      "desc": ""
    },
    "desc": "Cancels a subscription on stripe in order to check; that stripes triggers subscription deletion on bridgestars server.",
    "roles":["admin"],
    "errors":["Not logged in.", "Not admin.", "Param user missing.", "Param course missing."]
  },
  {
    "name": "test_cancelAndExitAllCourses",
    "params": [
      {
        "name": "user",
        "type": "string",
        "desc": "The UID of the user"
      }
    ],
    "return": {
      "type": "void",
      "desc": ""
    },
    "desc": "Cancels all subscriptions on stripe and exits all courses.",
    "roles":["admin"],
    "errors":["Not logged in.", "Not admin.", "Param user missing.", "No subscription found but cleaned exited room and courses."]
  },
  {
    "name": "generateSubscriptionDashboardLink",
    "params": [
    ],
    "return": {
      "type": "string",
      "desc": "The URL to the subscription dashboard"
    },
    "desc": "Generates a link to the subscription dashboard on stripe.",
    "errors":["Not logged in.", "This user does not have any active subscriptions", "Could not create subscription (wierd text, should be 'could not create link')"]
  },
  {
    "name": "archivePost",
    "params": [
      {
        "name": "uid",
        "type": "string",
        "desc": "The UID of the post"
      }
    ],
    "return": {
      "type": "void","desc":""
    },
    "desc": "This function marks a post on the forum or voting pages as archived.; (Not the same as deleting., Will not appear in flow.)",
    "errors":["User not authenticated.", "uid not provided.", "Object not found.", "Action is not allowed. (user is not the author of the object or a moderator in the room the object is in)", "Object could not be archived. (it's the wrong type of object)"]
  }
]
